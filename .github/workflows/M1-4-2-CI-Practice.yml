name: Pylint
run-name: ${{ github.actor }} is on practice session M1-4-2-CI-Practice
on: [push]
jobs:

  editorconfig:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - uses: editorconfig-checker/action-editorconfig-checker@main
      - run: editorconfig-checker

  code-checker-black:
    needs: editorconfig
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - uses: rickstaa/action-black@v1
        with:
          black_args: ". --check"

#  code-checker-pylint:
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        python-version: ["3.8", "3.9", "3.10"]
#    steps:
#    - uses: actions/checkout@v3
#    - name: Set up Python ${{ matrix.python-version }}
#      uses: actions/setup-python@v3
#      with:
#        python-version: ${{ matrix.python-version }}
#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install pylint
#    - name: Analysing the code with pylint
#      run: |
#        printenv
#        pwd
#        cd app/
#        pylint $(git ls-files '*.py')

  code-checker-pylint:
    needs: editorconfig
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - run: pip install pylint -r app/requirements.txt
      - run: pylint **/*.py

  # markdown-checker:                     Not able to set configuration
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v4
  #     - name: Run Markdown Lint
  #       uses: actionshub/markdownlint@main

  markdown-checker:
    needs: editorconfig
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Run marksown checker
        uses: DavidAnson/markdownlint-cli2-action@v13
        with:
          config: '.markdownlint.yml'
          globs: '**/*.md'

  # unit-test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v1
  #     - run: pip install pylint -r app/requirements.txt
  #     - run: python -m unittest app/app_test.py

  unit-test:
    needs: editorconfig
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt
      - name: Test with pytest
        run: |
          pip install pytest pytest-cov
          pytest app/app_test.py --doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html



  gitleaks-scan:
    needs: editorconfig
    name: gitleaks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}} # Only required for Organizations, not personal accounts

  sonarcloud:
    needs: editorconfig
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  snyk-check:
    needs: editorconfig
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python-3.10@master
        with:
          args: --severity-threshold=high
#          args: --file=app/requirements.txt
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  build-docker-image-push-if-pass-trivy:
    needs: [editorconfig,code-checker-black, code-checker-pylint, markdown-checker, unit-test, gitleaks-scan, sonarcloud, snyk-check]
    runs-on: ubuntu-latest
    steps:
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Preliminary build of docker image
        uses: docker/build-push-action@v5
        with:
          load: true
          push: false
          tags: "ci-practice:pre-image"
      -
        name: Run Trivy vulnerability scanner on 'pre-image'
        uses: aquasecurity/trivy-action@master
        with:
            image-ref: 'ci-practice:pre-image'
            format: 'table'
            exit-code: '1'
            ignore-unfixed: true
            vuln-type: 'os,library'
            severity: 'CRITICAL,HIGH'
      -
        name: Build docker and Push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: "ymatev/ci-practice:${{ github.sha }}"
