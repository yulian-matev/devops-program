name: Pylint
run-name: ${{ github.actor }} is on practice session M1-4-2-CI-Practice
on: [push]
jobs:

  editorconfig:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - uses: editorconfig-checker/action-editorconfig-checker@main
      - run: editorconfig-checker

  code-checker-black:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - uses: rickstaa/action-black@v1
        with:
          black_args: ". --check"

#  code-checker-pylint:
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        python-version: ["3.8", "3.9", "3.10"]
#    steps:
#    - uses: actions/checkout@v3
#    - name: Set up Python ${{ matrix.python-version }}
#      uses: actions/setup-python@v3
#      with:
#        python-version: ${{ matrix.python-version }}
#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install pylint
#    - name: Analysing the code with pylint
#      run: |
#        printenv
#        pwd
#        cd app/
#        pylint $(git ls-files '*.py')

  code-checker-pylint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v1
      - run: pip install pylint -r requirements.txt
      - run: pylint **/*.py

  # markdown-checker:                     Not able to set configuration
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v4
  #     - name: Run Markdown Lint
  #       uses: actionshub/markdownlint@main

  markdown-checker2:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Run marksown checker
        uses: DavidAnson/markdownlint-cli2-action@v13
        with:
          config: '.markdownlint.yml'
          globs: '**/*.md'

  unit-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v1
      - run: pip install pylint -r app/requirements.txt
      - run: python -m unittest app/app_test.py

  leaks-scan:
    name: gitleaks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}} # Only required for Organizations, not personal accounts

  sonarcloud:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      with:
        projectBaseDir: app
        args: >
          -Dsonar.organization=yulian-matev
          -Dsonar.projectKey=yulian-matev
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

